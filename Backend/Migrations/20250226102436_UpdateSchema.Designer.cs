// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MyBackend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250226102436_UpdateSchema")]
    partial class UpdateSchema
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Attraction", b =>
                {
                    b.Property<int>("AttractionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AttractionID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("AttractionID");

                    b.ToTable("Attractions");
                });

            modelBuilder.Entity("Path", b =>
                {
                    b.Property<int>("PathID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PathID"));

                    b.Property<float>("Distance")
                        .HasColumnType("real");

                    b.Property<int>("FromAttractionID")
                        .HasColumnType("integer");

                    b.Property<int>("ToAttractionID")
                        .HasColumnType("integer");

                    b.Property<int>("TravelTime")
                        .HasColumnType("integer");

                    b.HasKey("PathID");

                    b.HasIndex("FromAttractionID");

                    b.HasIndex("ToAttractionID");

                    b.ToTable("Paths");
                });

            modelBuilder.Entity("Route", b =>
                {
                    b.Property<int>("RouteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RouteID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RouteName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserID")
                        .HasColumnType("integer");

                    b.HasKey("RouteID");

                    b.HasIndex("UserID");

                    b.ToTable("Routes");
                });

            modelBuilder.Entity("RouteAttraction", b =>
                {
                    b.Property<int>("RouteAttractionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RouteAttractionID"));

                    b.Property<int>("AttractionID")
                        .HasColumnType("integer");

                    b.Property<int>("RouteID")
                        .HasColumnType("integer");

                    b.Property<int>("StopOrder")
                        .HasColumnType("integer");

                    b.HasKey("RouteAttractionID");

                    b.HasIndex("AttractionID");

                    b.HasIndex("RouteID");

                    b.ToTable("RouteAttractions");
                });

            modelBuilder.Entity("SearchQuery", b =>
                {
                    b.Property<int>("QueryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("QueryID"));

                    b.Property<int>("EndAttractionID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("SearchDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("StartAttractionID")
                        .HasColumnType("integer");

                    b.Property<int>("UserID")
                        .HasColumnType("integer");

                    b.HasKey("QueryID");

                    b.HasIndex("UserID");

                    b.ToTable("SearchQueries");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Path", b =>
                {
                    b.HasOne("Attraction", "FromAttraction")
                        .WithMany()
                        .HasForeignKey("FromAttractionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Attraction", "ToAttraction")
                        .WithMany()
                        .HasForeignKey("ToAttractionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FromAttraction");

                    b.Navigation("ToAttraction");
                });

            modelBuilder.Entity("Route", b =>
                {
                    b.HasOne("User", "User")
                        .WithMany("Routes")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RouteAttraction", b =>
                {
                    b.HasOne("Attraction", "Attraction")
                        .WithMany("RouteAttractions")
                        .HasForeignKey("AttractionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Route", "Route")
                        .WithMany("RouteAttractions")
                        .HasForeignKey("RouteID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attraction");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("SearchQuery", b =>
                {
                    b.HasOne("User", "User")
                        .WithMany("SearchQueries")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Attraction", b =>
                {
                    b.Navigation("RouteAttractions");
                });

            modelBuilder.Entity("Route", b =>
                {
                    b.Navigation("RouteAttractions");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Navigation("Routes");

                    b.Navigation("SearchQueries");
                });
#pragma warning restore 612, 618
        }
    }
}
